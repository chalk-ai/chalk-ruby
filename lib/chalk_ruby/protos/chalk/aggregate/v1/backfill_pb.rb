# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: chalk/aggregate/v1/backfill.proto

require 'google/protobuf'

require 'chalk/aggregate/v1/timeseries_pb'
require 'google/protobuf/duration_pb'
require 'google/protobuf/timestamp_pb'


descriptor_data = "\n!chalk/aggregate/v1/backfill.proto\x12\x12\x63halk.aggregate.v1\x1a#chalk/aggregate/v1/timeseries.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"\x8c\x02\n\x1d\x41ggregateBackfillCostEstimate\x12\x1f\n\x0bmax_buckets\x18\x01 \x01(\x03R\nmaxBuckets\x12)\n\x10\x65xpected_buckets\x18\x02 \x01(\x03R\x0f\x65xpectedBuckets\x12%\n\x0e\x65xpected_bytes\x18\x03 \x01(\x03R\rexpectedBytes\x12\x32\n\x15\x65xpected_storage_cost\x18\x04 \x01(\x01R\x13\x65xpectedStorageCost\x12\x44\n\x10\x65xpected_runtime\x18\x05 \x01(\x0b\x32\x19.google.protobuf.DurationR\x0f\x65xpectedRuntime\"\xf8\x02\n\x1b\x41ggregateBackfillUserParams\x12\x1a\n\x08\x66\x65\x61tures\x18\x01 \x03(\tR\x08\x66\x65\x61tures\x12\x1f\n\x08resolver\x18\x02 \x01(\tH\x00R\x08resolver\x88\x01\x01\x12;\n\x15timestamp_column_name\x18\x03 \x01(\tB\x02\x18\x01H\x01R\x13timestampColumnName\x88\x01\x01\x12@\n\x0blower_bound\x18\x04 \x01(\x0b\x32\x1a.google.protobuf.TimestampH\x02R\nlowerBound\x88\x01\x01\x12@\n\x0bupper_bound\x18\x05 \x01(\x0b\x32\x1a.google.protobuf.TimestampH\x03R\nupperBound\x88\x01\x01\x12\x14\n\x05\x65xact\x18\x06 \x01(\x08R\x05\x65xactB\x0b\n\t_resolverB\x18\n\x16_timestamp_column_nameB\x0e\n\x0c_lower_boundB\x0e\n\x0c_upper_bound\"\xe5\x03\n\x11\x41ggregateBackfill\x12?\n\x06series\x18\x01 \x03(\x0b\x32\'.chalk.aggregate.v1.AggregateTimeSeriesR\x06series\x12\x1a\n\x08resolver\x18\x02 \x01(\tR\x08resolver\x12)\n\x10\x64\x61tetime_feature\x18\x03 \x01(\tR\x0f\x64\x61tetimeFeature\x12\x42\n\x0f\x62ucket_duration\x18\x04 \x01(\x0b\x32\x19.google.protobuf.DurationR\x0e\x62ucketDuration\x12/\n\x13\x66ilters_description\x18\x05 \x01(\tR\x12\x66iltersDescription\x12\x19\n\x08group_by\x18\x06 \x03(\tR\x07groupBy\x12>\n\rmax_retention\x18\x07 \x01(\x0b\x32\x19.google.protobuf.DurationR\x0cmaxRetention\x12;\n\x0blower_bound\x18\x08 \x01(\x0b\x32\x1a.google.protobuf.TimestampR\nlowerBound\x12;\n\x0bupper_bound\x18\t \x01(\x0b\x32\x1a.google.protobuf.TimestampR\nupperBound\"\xb5\x01\n!AggregateBackfillWithCostEstimate\x12\x41\n\x08\x62\x61\x63kfill\x18\x01 \x01(\x0b\x32%.chalk.aggregate.v1.AggregateBackfillR\x08\x62\x61\x63kfill\x12M\n\x08\x65stimate\x18\x02 \x01(\x0b\x32\x31.chalk.aggregate.v1.AggregateBackfillCostEstimateR\x08\x65stimate\"\x94\x03\n\x14\x41ggregateBackfillJob\x12\x0e\n\x02id\x18\x01 \x01(\tR\x02id\x12%\n\x0e\x65nvironment_id\x18\x02 \x01(\tR\renvironmentId\x12\x1f\n\x08resolver\x18\x03 \x01(\tH\x00R\x08resolver\x88\x01\x01\x12\x1a\n\x08\x66\x65\x61tures\x18\x04 \x03(\tR\x08\x66\x65\x61tures\x12\x1e\n\x08\x61gent_id\x18\x05 \x01(\tH\x01R\x07\x61gentId\x88\x01\x01\x12(\n\rdeployment_id\x18\x06 \x01(\tH\x02R\x0c\x64\x65ploymentId\x88\x01\x01\x12\x39\n\ncreated_at\x18\x07 \x01(\x0b\x32\x1a.google.protobuf.TimestampR\tcreatedAt\x12\x39\n\nupdated_at\x18\x08 \x01(\x0b\x32\x1a.google.protobuf.TimestampR\tupdatedAt\x12\x1c\n\tresolvers\x18\t \x03(\tR\tresolversB\x0b\n\t_resolverB\x0b\n\t_agent_idB\x10\n\x0e_deployment_idB\xa0\x01\n\x16\x63om.chalk.aggregate.v1B\rBackfillProtoP\x01Z\x18\x61ggregate/v1;aggregatev1\xa2\x02\x03\x43\x41X\xaa\x02\x12\x43halk.Aggregate.V1\xca\x02\x12\x43halk\\Aggregate\\V1\xe2\x02\x1e\x43halk\\Aggregate\\V1\\GPBMetadata\xea\x02\tChalkRubyb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool
pool.add_serialized_file(descriptor_data)

module ChalkRuby
  AggregateBackfillCostEstimate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.aggregate.v1.AggregateBackfillCostEstimate").msgclass
  AggregateBackfillUserParams = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.aggregate.v1.AggregateBackfillUserParams").msgclass
  AggregateBackfill = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.aggregate.v1.AggregateBackfill").msgclass
  AggregateBackfillWithCostEstimate = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.aggregate.v1.AggregateBackfillWithCostEstimate").msgclass
  AggregateBackfillJob = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.aggregate.v1.AggregateBackfillJob").msgclass
end
