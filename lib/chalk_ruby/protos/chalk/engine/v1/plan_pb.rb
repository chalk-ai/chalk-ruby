# frozen_string_literal: true
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: chalk/engine/v1/plan.proto

require 'google/protobuf'

require 'chalk/arrow/v1/arrow_pb'


descriptor_data = "\n\x1a\x63halk/engine/v1/plan.proto\x12\x0f\x63halk.engine.v1\x1a\x1a\x63halk/arrow/v1/arrow.proto\"\"\n\x0cRawColumnKey\x12\x12\n\x04name\x18\x01 \x01(\tR\x04name\"-\n\x10\x46\x65\x61tureColumnKey\x12\x19\n\x08root_fqn\x18\x01 \x01(\tR\x07rootFqn\"Z\n\x11HasManyFeatureKey\x12\x19\n\x08root_fqn\x18\x01 \x01(\tR\x07rootFqn\x12*\n\x02\x64\x66\x18\x02 \x01(\x0b\x32\x1a.chalk.engine.v1.DataFrameR\x02\x64\x66\"h\n\x13\x44\x61taFrameFeatureKey\x12%\n\x0eroot_namespace\x18\x01 \x01(\tR\rrootNamespace\x12*\n\x02\x64\x66\x18\x02 \x01(\x0b\x32\x1a.chalk.engine.v1.DataFrameR\x02\x64\x66\"\xcc\x01\n\tDataFrame\x12L\n\x10optional_columns\x18\x01 \x03(\x0b\x32!.chalk.engine.v1.FeatureColumnKeyR\x0foptionalColumns\x12L\n\x10required_columns\x18\x02 \x03(\x0b\x32!.chalk.engine.v1.FeatureColumnKeyR\x0frequiredColumns\x12\x19\n\x05limit\x18\x03 \x01(\x04H\x00R\x05limit\x88\x01\x01\x42\x08\n\x06_limit\"\x84\x01\n\tColumnKey\x12=\n\x07\x66\x65\x61ture\x18\x01 \x01(\x0b\x32!.chalk.engine.v1.FeatureColumnKeyH\x00R\x07\x66\x65\x61ture\x12\x31\n\x03raw\x18\x02 \x01(\x0b\x32\x1d.chalk.engine.v1.RawColumnKeyH\x00R\x03rawB\x05\n\x03key\"\x99\x01\n\x08TableKey\x12?\n\x08has_many\x18\x01 \x01(\x0b\x32\".chalk.engine.v1.HasManyFeatureKeyH\x00R\x07hasMany\x12\x45\n\ndata_frame\x18\x02 \x01(\x0b\x32$.chalk.engine.v1.DataFrameFeatureKeyH\x00R\tdataFrameB\x05\n\x03key\"\x91\x02\n\x03Key\x12>\n\nraw_column\x18\x01 \x01(\x0b\x32\x1d.chalk.engine.v1.RawColumnKeyH\x00R\trawColumn\x12;\n\x06scalar\x18\x02 \x01(\x0b\x32!.chalk.engine.v1.FeatureColumnKeyH\x00R\x06scalar\x12?\n\x08has_many\x18\x03 \x01(\x0b\x32\".chalk.engine.v1.HasManyFeatureKeyH\x00R\x07hasMany\x12\x44\n\tdataframe\x18\x04 \x01(\x0b\x32$.chalk.engine.v1.DataFrameFeatureKeyH\x00R\tdataframeB\x06\n\x04impl\"\xee\x03\n\rPyArrowSchema\x12\x45\n\x07scalars\x18\x01 \x03(\x0b\x32+.chalk.engine.v1.PyArrowSchema.ColumnSchemaR\x07scalars\x12\x42\n\x06groups\x18\x02 \x03(\x0b\x32*.chalk.engine.v1.PyArrowSchema.TableSchemaR\x06groups\x1a\xe0\x01\n\x0bTableSchema\x12+\n\x03key\x18\x01 \x01(\x0b\x32\x19.chalk.engine.v1.TableKeyR\x03key\x12N\n\x06schema\x18\x02 \x03(\x0b\x32\x36.chalk.engine.v1.PyArrowSchema.TableSchema.SchemaEntryR\x06schema\x1aT\n\x0bSchemaEntry\x12\x10\n\x03key\x18\x01 \x01(\tR\x03key\x12/\n\x05value\x18\x02 \x01(\x0b\x32\x19.chalk.arrow.v1.ArrowTypeR\x05value:\x02\x38\x01\x1ao\n\x0c\x43olumnSchema\x12,\n\x03key\x18\x01 \x01(\x0b\x32\x1a.chalk.engine.v1.ColumnKeyR\x03key\x12\x31\n\x06schema\x18\x02 \x01(\x0b\x32\x19.chalk.arrow.v1.ArrowTypeR\x06schema\"\x9e\x01\n\x04Plan\x12+\n\x05nodes\x18\x01 \x03(\x0b\x32\x15.chalk.engine.v1.NodeR\x05nodes\x12\"\n\rroot_node_idx\x18\x02 \x01(\rR\x0brootNodeIdx\x12\x45\n\x0epyarrow_schema\x18\x03 \x01(\x0b\x32\x1e.chalk.engine.v1.PyArrowSchemaR\rpyarrowSchema\"`\n\x04Node\x12)\n\x10\x63hildren_indices\x18\x01 \x03(\rR\x0f\x63hildrenIndices\x12-\n\x04impl\x18\x02 \x01(\x0b\x32\x19.chalk.engine.v1.NodeImplR\x04impl\"\xd7\x02\n\x08NodeImpl\x12\x38\n\x07unknown\x18\x01 \x01(\x0b\x32\x1c.chalk.engine.v1.UnknownNodeH\x00R\x07unknown\x12>\n\x0bgivens_scan\x18\x02 \x01(\x0b\x32\x1b.chalk.engine.v1.GivensScanH\x00R\ngivensScan\x12\x34\n\x07project\x18\x03 \x01(\x0b\x32\x18.chalk.engine.v1.ProjectH\x00R\x07project\x12\x44\n\rchalk_project\x18\x04 \x01(\x0b\x32\x1d.chalk.engine.v1.ChalkProjectH\x00R\x0c\x63halkProject\x12M\n\x10\x64\x65\x66\x61ult_injector\x18\x05 \x01(\x0b\x32 .chalk.engine.v1.DefaultInjectorH\x00R\x0f\x64\x65\x66\x61ultInjectorB\x06\n\x04impl\"*\n\x0bUnknownNode\x12\x1b\n\ttype_name\x18\x01 \x01(\tR\x08typeName\":\n\nGivensScan\x12,\n\x06\x66ields\x18\x01 \x03(\x0b\x32\x14.chalk.engine.v1.KeyR\x06\x66ields\"x\n\x0c\x43halkProject\x12,\n\x06\x66ields\x18\x01 \x03(\x0b\x32\x14.chalk.engine.v1.KeyR\x06\x66ields\x12:\n\x1apromote_ts_to_feature_time\x18\x02 \x01(\x08R\x16promoteTsToFeatureTime\"7\n\x07Project\x12,\n\x06\x66ields\x18\x01 \x03(\x0b\x32\x14.chalk.engine.v1.KeyR\x06\x66ields\"X\n\x0f\x44\x65\x66\x61ultInjector\x12\x45\n\x13\x64\x65\x66\x61ulting_features\x18\x01 \x03(\x0b\x32\x14.chalk.engine.v1.KeyR\x12\x64\x65\x66\x61ultingFeaturesBv\n\x13\x63om.chalk.engine.v1B\tPlanProtoP\x01\xa2\x02\x03\x43\x45X\xaa\x02\x0f\x43halk.Engine.V1\xca\x02\x0f\x43halk\\Engine\\V1\xe2\x02\x1b\x43halk\\Engine\\V1\\GPBMetadata\xea\x02\tChalkRubyb\x06proto3"

pool = Google::Protobuf::DescriptorPool.generated_pool
pool.add_serialized_file(descriptor_data)

module ChalkRuby
  RawColumnKey = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.RawColumnKey").msgclass
  FeatureColumnKey = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.FeatureColumnKey").msgclass
  HasManyFeatureKey = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.HasManyFeatureKey").msgclass
  DataFrameFeatureKey = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.DataFrameFeatureKey").msgclass
  DataFrame = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.DataFrame").msgclass
  ColumnKey = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.ColumnKey").msgclass
  TableKey = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.TableKey").msgclass
  Key = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.Key").msgclass
  PyArrowSchema = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.PyArrowSchema").msgclass
  PyArrowSchema::TableSchema = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.PyArrowSchema.TableSchema").msgclass
  PyArrowSchema::ColumnSchema = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.PyArrowSchema.ColumnSchema").msgclass
  Plan = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.Plan").msgclass
  Node = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.Node").msgclass
  NodeImpl = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.NodeImpl").msgclass
  UnknownNode = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.UnknownNode").msgclass
  GivensScan = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.GivensScan").msgclass
  ChalkProject = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.ChalkProject").msgclass
  Project = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.Project").msgclass
  DefaultInjector = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("chalk.engine.v1.DefaultInjector").msgclass
end
